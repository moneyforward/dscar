version: 2.1

parameters:
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"
  project-git_url:
    type: string
    default: ""
  git-base_revision:
    type: string
    default: ""
  git-revision:
    type: string
    default: ""

orbs:
  orb-tools: circleci/orb-tools@9.0.1
  dscar: moneyforward/dscar@<< pipeline.parameters.dev-orb-version >>

anchors:
  dscar-default-executor: &dscar-default-executor
    name: dscar/default
    project-git_url: << pipeline.parameters.project-git_url >>
    git-base_revision: << pipeline.parameters.git-base_revision >>
    git-revision: << pipeline.parameters.git-revision >>

jobs:
  integration-test-1:
    executor:
      <<: *dscar-default-executor
    steps:
      - checkout
      - dscar/analyze
  integration-test-2:
    executor:
      <<: *dscar-default-executor
    steps:
      - run:
          name: setup
          command: |
            declare -x CIRCLE_PULL_REQUEST=https://github.com/moneyforward/dscar/pull/6
            declare -x CIRCLE_PULL_REQUESTS=$CIRCLE_PULL_REQUEST
            declare -x CIRCLE_USERNAME=naokikimura
            declare -x CIRCLE_SHA1=0a25943dce63cb2ac481dd8b672bfe53384f8086

            ANALYSIS_NAME=CoffeeLint
            BASE_SHA=5e563b0a2f9dd712a285a7835797afded818f79b
            HEAD_SHA=$CIRCLE_SHA1
            declare -Ax DSCAR_COMMIT_RANGES=(
              ["${CIRCLE_PULL_REQUEST}"]="${BASE_SHA}..${HEAD_SHA}"
            )

            mkdir -p "${DSCAR_ANALYSIS_RESULTS_PATH}/${ANALYSIS_NAME}"
            cat \<<-EOT > ${DSCAR_ANALYSIS_RESULTS_PATH}/${ANALYSIS_NAME}/${HEAD_SHA}-analysis-result.xml
            <?xml version="1.0" encoding="UTF-8"?>
            <checkstyle>
              <file name="app/assets/javascripts/index.js.coffee">
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="1" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="1" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="3" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="4" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="4" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="6" column="0"/>
                <error source="no_unnecessary_double_quotes" message="Unnecessary double quotes are forbidden" severity="error" line="7" column="0"/>
              </file>
            </checkstyle>
            EOT

            cat \<<-EOT >> $BASH_ENV
            $(declare -p CIRCLE_SHA1)
            $(declare -p CIRCLE_USERNAME)
            $(declare -p CIRCLE_PULL_REQUEST)
            $(declare -p CIRCLE_PULL_REQUESTS)
            $(declare -p DSCAR_COMMIT_RANGES)
            EOT

            COMMENT_FINGERPRINTS_PATH="/tmp/dscar/comment-fingerprints/.MESSAGES_THAT_COULD_NOT_BE_COMMENTED"
            COMMENT_FINGERPRINTS="${COMMENT_FINGERPRINTS_PATH}/$(echo "${CIRCLE_PULL_REQUEST}" | sha1sum | cut -c1-40)"
            mkdir -p "$(dirname "${COMMENT_FINGERPRINTS}")"
            echo 'b84eeea8caeb3517e9474b7ae81646846a092ad2  -' > "${COMMENT_FINGERPRINTS}"
      - dscar/comment:
          when: on_success
  integration-test-3:
    executor:
      <<: *dscar-default-executor
    steps:
      - run:
          name: setup
          command: |
            mkdir -p ${DSCAR_ANALYSIS_RESULTS_PATH}/true/{0,1}
            for FILE in ${DSCAR_ANALYSIS_RESULTS_PATH}/true/{0,1}/{01234567,89abcdef}-analysis-result.xml
            do
              echo '<checkstyle />' > $FILE
            done
            declare -Ax DSCAR_COMMIT_RANGES=( [http://example.com/]='01234567..89abcdef' )
            echo "$(declare -p DSCAR_COMMIT_RANGES)" >> $BASH_ENV
      - dscar/combine
      - run:
          name: evaluate
          command: |
            COUNT=$(
              find ${DSCAR_ANALYSIS_RESULTS_PATH} -type f |
              tee /dev/stderr |
              grep -cE '.*/@/[0-9]+-(01234567|89abcdef)-analysis-result.xml'
            )
            test $COUNT -eq 2
  integration-test-4:
    executor:
      <<: *dscar-default-executor
    steps:
      - run:
          name: setup
          command: |
            mkdir -p ${DSCAR_ANALYSIS_RESULTS_PATH}/true/{0,1}
            for FILE in ${DSCAR_ANALYSIS_RESULTS_PATH}/true/{0,1}/{01234567,89abcdef}-analysis-result.xml
            do
              echo '<checkstyle />' > $FILE
            done
            declare -Ax DSCAR_COMMIT_RANGES=( [http://example.com/]='01234567..89abcdef' )
            echo "$(declare -p DSCAR_COMMIT_RANGES)" >> $BASH_ENV
      - dscar/set-analysis-result-paths:
          has-aggregated: false
      - run:
          name: evaluate
          command: |
            set -x
            DIR="${DSCAR_ANALYSIS_RESULTS_PATH}/true/${CIRCLE_NODE_INDEX}"
            test ${#FIRST_RESULT_PATH[@]} -eq 1 -a "${FIRST_RESULT_PATH}" = "${DIR}/89abcdef-analysis-result.xml"
            test ${#SECOND_RESULT_PATH[@]} -eq 1 -a "${SECOND_RESULT_PATH}" = "${DIR}/01234567-analysis-result.xml"
            test ${#DELTA_RESULT_PATH[@]} -eq 1 -a "${DELTA_RESULT_PATH}" = "${DIR}/9c17e047f58f9220a7008d4f18152fee4d111d14-DELTA-analysis-result.xml"
  integration-test-5:
    executor:
      <<: *dscar-default-executor
    steps:
      # test-case-1
      - run:
          name: setup
          command: |
            set -x
            rm -f {HEAD,BASE,DELTA}-analysis-result.xml
      - dscar/calculate
      - run:
          name: evaluate
          command: |
            set -x
            test -e "DELTA-analysis-result.xml"
            sudo apt-get install xmlstarlet
            ! xmlstarlet sel -t -m '//error' -n >/dev/null < "DELTA-analysis-result.xml"
      # test-case-2
      - run:
          name: setup
          command: |
            set -x
            rm -f {HEAD,BASE,DELTA}-analysis-result.xml
            echo '<checkstyle><file><error/></file></checkstyle>' > HEAD-analysis-result.xml
      - dscar/calculate
      - run:
          name: evaluate
          command: |
            set -x
            test -e "DELTA-analysis-result.xml"
            sudo apt-get install xmlstarlet
            xmlstarlet sel -t -m '//error' -n >/dev/null < "DELTA-analysis-result.xml"

workflows:
  lint_pack-validate_publish-dev:
    jobs:
      - orb-tools/lint
      - orb-tools/pack:
          context: dscar
          requires:
            - orb-tools/lint
      - orb-tools/publish-dev:
          context: dscar
          orb-name: moneyforward/dscar
          requires:
            - orb-tools/pack
      - orb-tools/trigger-integration-tests-workflow:
          context: dscar
          name: trigger-integration-dev
          pipeline-param-map: |
            {
              \"run-integration-tests\": true,
              \"dev-orb-version\": \"dev:${CIRCLE_SHA1:0:7}\",
              \"project-git_url\": \"<< pipeline.project.git_url >>\",
              \"git-base_revision\": \"<< pipeline.git.base_revision >>\",
              \"git-revision\": \"<< pipeline.git.revision >>\"
            }
          requires:
            - orb-tools/publish-dev
    unless: << pipeline.parameters.run-integration-tests >>
  integration-tests:
    jobs:
      - integration-test-1
      - integration-test-2
      - integration-test-3
      - integration-test-4
      - integration-test-5
    when: << pipeline.parameters.run-integration-tests >>
