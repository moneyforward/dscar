version: 2.1

description: |
  Delta Static Code Analysis Reports running on CircleCI

  This Orb calculates the difference between two static code analysis results. However, the format of the static code analysis result must be JUnit XML. Using this Orb, you can get the static code analysis result for the update difference between HEAD branch and its BASE branch.

orbs:
  compare-url: iynere/compare-url@1.2.0
  node: circleci/node@1.1.6

executors:
  default:
    description: Default analysis execution environment
    parameters:
      docker-image:
        description: Specify the image used to execute the analysis
        type: string
        default: circleci/node
    docker:
      - image: << parameters.docker-image >>

commands:
  analyze:
    description: Analyze code statically
    parameters:
      should-find:
        description: Specify true if you want to find for analysis targets
        type: enum
        enum: ["true", "false"]
        default: "false"
      patterns-to-include:
        description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ".*"
      patterns-to-exclude:
        description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ""
      starting-points:
        description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
        type: string
        default: "."
      analysis-command:
        description: The command used for analysis
        type: string
        default: "true"
      analysis-arguments:
        description: Arguments of analysis command
        type: string
        default: ""
      header-command:
        description: The command used for header of analysis result
        type: string
        default: "true"
      header-arguments:
        description: Arguments of header command
        type: string
        default: ""
      footer-command:
        description: The command used for footer of analysis result
        type: string
        default: "true"
      footer-arguments:
        description: Arguments of footer command
        type: string
        default: ""
      transformation-command:
        description: The command used for transformation
        type: string
        default: "cat"
      transformation-arguments:
        description: Arguments of transformation command
        type: string
        default: ""
      results-path:
        description: Path to save analysis results
        type: string
        default: "/dev/null"
      ignore-exit-code:
        description: Specify true if you want the exit code of the analysis step to always return 0.
        type: boolean
        default: false
      prepare:
        description: Specify the required steps before analysis if necessary
        type: steps
        default: []
      step-name:
        description: Specify a analysis step name for this command, if desired
        type: string
        default: Analyze code statically
      redirecting-output:
        description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
        type: enum
        enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
        default: "/dev/stdout"
      exit-code-threshold:
        description: Specify the upper limit of the exit code that is regarded as normal termination
        type: integer
        default: 124
    steps:
      - steps: << parameters.prepare >>
      - run:
          name: << parameters.step-name >>
          environment:
            SHOULD_FIND: << parameters.should-find >>
            STARTING_POINTS: << parameters.starting-points >>
            PATTERNS_TO_INCLUDE: << parameters.patterns-to-include >>
            PATTERNS_TO_EXCLUDE: << parameters.patterns-to-exclude >>
            ANALYSIS_COMMAND: << parameters.analysis-command >>
            HEADER_COMMAND: << parameters.header-command >>
            FOOTER_COMMAND: << parameters.footer-command >>
            PARAM_ANALYSIS_ARGUMENTS: << parameters.analysis-arguments >>
            PARAM_HEADER_ARGUMENTS: << parameters.header-arguments >>
            PARAM_FOOTER_ARGUMENTS: << parameters.footer-arguments >>
            PARAM_TRANSFORMATION_ARGUMENTS: << parameters.transformation-arguments >>
            TRANSFORMATION_COMMAND: << parameters.transformation-command >>
            RESULTS_PATH: << parameters.results-path >>
          command: |
              set +e -x
              {
                if $SHOULD_FIND
                then {
                  echo "$STARTING_POINTS" | awk NF | while read -r path; do printf '%q\n' "$path" || exit $?; done
                  echo '-type f ( -path ""'
                  echo "$PATTERNS_TO_INCLUDE" | awk NF | while read -r pattern; do printf -- '-o -regex %q\n' "$pattern" || exit $? ; done
                  echo ') '
                  echo "$PATTERNS_TO_EXCLUDE" | awk NF | while read -r pattern; do printf '! -regex %q\n' "$pattern" || exit $? ; done
                  echo '-print0'
                } | xargs -t find
                else {
                  echo "$STARTING_POINTS"
                } | tr '\n' '\0'
                fi
              } |
                xargs -0t "${ANALYSIS_COMMAND:-true}" "${ANALYSIS_ARGUMENTS[@]}" ${PARAM_ANALYSIS_ARGUMENTS} |
                cat \
                  <("${HEADER_COMMAND:-true}" "${HEADER_ARGUMENTS[@]}" ${PARAM_HEADER_ARGUMENTS}) \
                  - \
                  <("${FOOTER_COMMAND:-true}" "${FOOTER_ARGUMENTS[@]}" ${PARAM_FOOTER_ARGUMENTS}) |
                "${TRANSFORMATION_COMMAND:-cat}" "${TRANSFORMATION_ARGUMENTS[@]}" ${PARAM_TRANSFORMATION_ARGUMENTS}  |
                tee "${RESULTS_PATH:-/dev/null}" ><< parameters.redirecting-output >> ||
                test $? -lt << parameters.exit-code-threshold >> || << parameters.ignore-exit-code >>
  calculate:
    description: |
      Calculate the difference between the analysis results

      Use the [junit-reports-combiner][1] command to calculate the difference

      [1]: https://www.npmjs.com/package/junit-reports-combiner
    parameters:
      options:
        description: Specify options for the junit-reports-combiner command
        type: string
        default: ""
      first-results-path:
        description: Path of the file to use as the minuend
        type: string
        default: "HEAD-analysis-results.xml"
      second-results-path:
        description: Path of the file to use as the subtrahend
        type: string
        default: "BASE-analysis-results.xml"
      delta-results-path:
        description: Path to save difference of analysis results
        type: string
        default: "/dev/null"
    steps:
      - node/install
      - run:
          name: Calculate the difference
          environment:
              COMMAND: junit-reports-combiner
              OPTIONS: << parameters.options >>
              FIRST_RESULTS_PATH: << parameters.first-results-path >>
              SECOND_RESULTS_PATH: << parameters.second-results-path >>
              DELTA_RESULTS_PATH: << parameters.delta-results-path >>
          command: |
              set -x
              sudo apt-get install xmlstarlet
              sudo npm install --global "$COMMAND"

              TEMP_FILE=$(mktemp)
              NODE_DEBUG="$COMMAND" "$COMMAND" $OPTIONS --operator=except \
                "${FIRST_RESULTS_PATH:-HEAD-analysis-results.xml}" \
                "${SECOND_RESULTS_PATH:-BASE-analysis-results.xml}" |
                tee "$TEMP_FILE" "${DELTA_RESULTS_PATH:-/dev/null}" | xmlstarlet fo
              ! xmlstarlet sel -t -m '//failure|//error' -v '.' -n < "$TEMP_FILE" >/dev/null
  execute:
    description: alculate the difference of static code analysis results between HEAD branch and BASE branch
    parameters:
      prepare-to-execute:
        description: Specify the required steps before execute if necessary
        type: steps
        default: []
      prepare-to-analyze:
        description: Specify the required steps before analysis if necessary
        type: steps
        default: []
      should-find:
        description: Specify true if you want to find for analysis targets
        type: enum
        enum: ["true", "false"]
        default: "false"
      patterns-to-include:
        description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ".*"
      patterns-to-exclude:
        description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ""
      starting-points:
        description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
        type: string
        default: "."
      analysis-name:
        description: Analysis name
        type: string
        default: "true"
      analysis-command:
        description: The command used for analysis
        type: string
        default: "true"
      analysis-arguments:
        description: Arguments of analysis command
        type: string
        default: ""
      analysis-result-header-command:
        description: The command used for header of analysis result
        type: string
        default: "true"
      analysis-result-header-arguments:
        description: Arguments of header command
        type: string
        default: ""
      analysis-result-footer-command:
        description: The command used for footer of analysis result
        type: string
        default: "true"
      analysis-result-footer-arguments:
        description: Arguments of footer command
        type: string
        default: ""
      analysis-result-transformation-command:
        description: The command used for transformation
        type: string
        default: "cat"
      analysis-result-transformation-arguments:
        description: Arguments of transformation command
        type: string
        default: ""
      calculate-options:
        description: Specify options for the junit-reports-combiner command
        type: string
        default: ""
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
      redirecting-output:
        description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
        type: enum
        enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
        default: "/dev/stdout"
      project-path:
        description: Absolute path to your project's base directory, necessary for running git commands
        type: string
        default: $CIRCLE_WORKING_DIRECTORY
      ignore-analysis-exit-code:
        description: Specify true if you want the exit code of the analysis step to always return 0.
        type: boolean
        default: false
      analysis-exit-code-threshold:
        description: Specify the upper limit of the exit code that is regarded as normal termination
        type: integer
        default: 124
      should-save-analysis-results-as-artifacts:
        description: Specify true if analysis results should be saved as artifacts
        type: boolean
        default: false
    steps:
      - steps: << parameters.prepare-to-execute >>
      - checkout
      - compare-url/reconstruct:
          project-path: '`eval echo << parameters.project-path >>`'
          debug: true
      - run:
          name: Setup
          environment:
            ANALYSIS_NAME: << parameters.analysis-name >>
            ANALYSIS_RESULTS_PATH: << parameters.analysis-results-path >>
            TEST_RESULTS_PATH: << parameters.test-results-path >>
          command: |
              mkdir -p "${ANALYSIS_RESULTS_PATH:-/tmp/analysis-results}/${ANALYSIS_NAME:-true}"
              mkdir -p "${TEST_RESULTS_PATH:-/tmp/test-results}/${ANALYSIS_NAME:-true}"
      - analyze:
          step-name: Analyze the HEAD branch using << parameters.analysis-name >>
          prepare: << parameters.prepare-to-analyze >>
          should-find: << parameters.should-find >>
          patterns-to-include: << parameters.patterns-to-include >>
          patterns-to-exclude: << parameters.patterns-to-exclude >>
          starting-points: << parameters.starting-points >>
          analysis-command: << parameters.analysis-command >>
          analysis-arguments: << parameters.analysis-arguments >>
          header-command: << parameters.analysis-result-header-command >>
          header-arguments: << parameters.analysis-result-header-arguments >>
          footer-command: << parameters.analysis-result-footer-command >>
          footer-arguments: << parameters.analysis-result-footer-arguments >>
          transformation-command: << parameters.analysis-result-transformation-command >>
          transformation-arguments: << parameters.analysis-result-transformation-arguments >>
          results-path: << parameters.analysis-results-path >>/<< parameters.analysis-name >>/HEAD-analysis-results.xml
          redirecting-output: << parameters.redirecting-output >>
          ignore-exit-code: << parameters.ignore-analysis-exit-code >>
          exit-code-threshold: << parameters.analysis-exit-code-threshold >>
      - compare-url/use:
          custom-logic: |
              set +e
              git checkout $(cat BASE_COMPARE_COMMIT.txt) || git checkout HEAD^
      - analyze:
          step-name: Analyze the BASE branch using << parameters.analysis-name >>
          prepare: << parameters.prepare-to-analyze >>
          should-find: << parameters.should-find >>
          patterns-to-include: << parameters.patterns-to-include >>
          patterns-to-exclude: << parameters.patterns-to-exclude >>
          starting-points: << parameters.starting-points >>
          analysis-command: << parameters.analysis-command >>
          analysis-arguments: << parameters.analysis-arguments >>
          header-command: << parameters.analysis-result-header-command >>
          header-arguments: << parameters.analysis-result-header-arguments >>
          footer-command: << parameters.analysis-result-footer-command >>
          footer-arguments: << parameters.analysis-result-footer-arguments >>
          transformation-command: << parameters.analysis-result-transformation-command >>
          transformation-arguments: << parameters.analysis-result-transformation-arguments >>
          results-path: << parameters.analysis-results-path >>/<< parameters.analysis-name >>/BASE-analysis-results.xml
          redirecting-output: << parameters.redirecting-output >>
          ignore-exit-code: << parameters.ignore-analysis-exit-code >>
          exit-code-threshold: << parameters.analysis-exit-code-threshold >>
      - calculate:
          options: << parameters.calculate-options >>
          first-results-path: << parameters.analysis-results-path >>/<< parameters.analysis-name >>/HEAD-analysis-results.xml
          second-results-path: << parameters.analysis-results-path >>/<< parameters.analysis-name >>/BASE-analysis-results.xml
          delta-results-path: << parameters.test-results-path >>/<< parameters.analysis-name >>/DELTA-analysis-results.xml
      - store_test_results:
          path: << parameters.test-results-path >>
      - when:
          condition: << parameters.should-save-analysis-results-as-artifacts >>
          steps:
            - store_artifacts:
                path: << parameters.analysis-results-path >>

jobs:
  execute:
    description: Calculate the difference of static code analysis results between HEAD branch and BASE branch
    parameters:
      executor:
        description: 
        type: executor
        default: default
      prepare-to-execute:
        description: Specify the required steps before execute if necessary
        type: steps
        default: []
      prepare-to-analyze:
        description: Specify the required steps before analysis if necessary
        type: steps
        default: []
      should-find:
        description: Specify true if you want to find for analysis targets
        type: enum
        enum: ["true", "false"]
        default: "false"
      patterns-to-include:
        description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ".*"
      patterns-to-exclude:
        description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
        type: string
        default: ""
      starting-points:
        description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
        type: string
        default: "."
      analysis-name:
        description: Analysis name
        type: string
        default: "true"
      analysis-command:
        description: The command used for analysis
        type: string
        default: "true"
      analysis-arguments:
        description: Arguments of analysis command
        type: string
        default: ""
      analysis-result-header-command:
        description: The command used for header of analysis result
        type: string
        default: "true"
      analysis-result-header-arguments:
        description: Arguments of header command
        type: string
        default: ""
      analysis-result-footer-command:
        description: The command used for footer of analysis result
        type: string
        default: "true"
      analysis-result-footer-arguments:
        description: Arguments of footer command
        type: string
        default: ""
      analysis-result-transformation-command:
        description: The command used for transformation
        type: string
        default: "cat"
      analysis-result-transformation-arguments:
        description: Arguments of transformation command
        type: string
        default: ""
      calculate-options:
        description: Specify options for the junit-reports-combiner command
        type: string
        default: ""
      test-results-path:
        description: Specify the value of the path parameter in the store_test_results step if you need to change it
        type: string
        default: "/tmp/test-results"
      analysis-results-path:
        description: Specify the path to save the analysis results if you need to change it
        type: string
        default: "/tmp/analysis-results"
      redirecting-output:
        description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
        type: enum
        enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
        default: "/dev/stdout"
      ignore-analysis-exit-code:
        description: Specify true if you want the exit code of the analysis step to always return 0.
        type: boolean
        default: false
      analysis-exit-code-threshold:
        description: Specify the upper limit of the exit code that is regarded as normal termination
        type: integer
        default: 124
      should-save-analysis-results-as-artifacts:
        description: Specify true if analysis results should be saved as artifacts
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      - execute:
          prepare-to-execute: << parameters.prepare-to-execute >>
          prepare-to-analyze: << parameters.prepare-to-analyze >>
          should-find: << parameters.should-find >>
          patterns-to-include: << parameters.patterns-to-include >>
          patterns-to-exclude: << parameters.patterns-to-exclude >>
          starting-points: << parameters.starting-points >>
          analysis-name: << parameters.analysis-name >>
          analysis-command: << parameters.analysis-command >>
          analysis-arguments: << parameters.analysis-arguments >>
          analysis-result-header-command: << parameters.analysis-result-header-command >>
          analysis-result-header-arguments: << parameters.analysis-result-header-arguments >>
          analysis-result-footer-command: << parameters.analysis-result-footer-command >>
          analysis-result-footer-arguments: << parameters.analysis-result-footer-arguments >>
          analysis-result-transformation-command: << parameters.analysis-result-transformation-command >>
          analysis-result-transformation-arguments: << parameters.analysis-result-transformation-arguments >>
          calculate-options: << parameters.calculate-options >>
          test-results-path: << parameters.test-results-path >>
          analysis-results-path: << parameters.analysis-results-path >>
          redirecting-output: << parameters.redirecting-output >>
          ignore-analysis-exit-code: << parameters.ignore-analysis-exit-code >>
          analysis-exit-code-threshold: << parameters.analysis-exit-code-threshold >>
          should-save-analysis-results-as-artifacts: << parameters.should-save-analysis-results-as-artifacts >>

examples:
  dscar-brakeman:
    description: Calculate Brakeman's analysis results for update difference between HEAD branch and BASE branch
    usage:
      version: 2.1
      orbs:
        dscar: naokikimura/dscar@0.1.0
      workflows:
        analyze-code-statically:
          jobs:
            - dscar/execute:
                name: brakeman
                executor:
                  name: dscar/default
                  docker-image: circleci/ruby
                prepare-to-execute:
                  - run: sudo gem install brakeman
                analysis-name: Brakeman
                analysis-command: brakeman
                analysis-arguments: -f junit
                calculate-options: |
                  --test-case-key=concat(@classname,"#",@name,"=>",normalize-space())
                  --namespace=brakeman=https://brakemanscanner.org/
