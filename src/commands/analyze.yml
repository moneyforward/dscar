description: Analyze code statically
parameters:
  should-find:
    description: Specify true if you want to find for analysis targets
    type: enum
    enum: ["true", "false"]
    default: "false"
  patterns-to-include:
    description: Specify patterns to include by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: ".*"
  patterns-to-exclude:
    description: Specify patterns to exclude by regular expression (Multiple patterns can be specified by separating them with line feed)
    type: string
    default: ""
  starting-points:
    description: Specify the path of starting to search for files to analyze (Multiple paths can be specified by separating them with line feed)
    type: string
    default: "."
  analysis-command:
    description: The command used for analysis
    type: string
    default: "true"
  analysis-arguments:
    description: Arguments of analysis command
    type: string
    default: ""
  header-command:
    description: The command used for header of analysis result
    type: string
    default: "true"
  header-arguments:
    description: Arguments of header command
    type: string
    default: ""
  footer-command:
    description: The command used for footer of analysis result
    type: string
    default: "true"
  footer-arguments:
    description: Arguments of footer command
    type: string
    default: ""
  transformation-command:
    description: The command used for transformation
    type: string
    default: "cat"
  transformation-arguments:
    description: Arguments of transformation command
    type: string
    default: ""
  result-path:
    description: Path to save analysis result
    type: string
    default: "/dev/null"
  prepare:
    description: Specify the required steps before analysis if necessary
    type: steps
    default: []
  step-name:
    description: Specify a analysis step name for this command, if desired
    type: string
    default: Analyze code statically
  redirecting-output:
    description: Specify "/dev/null" if you do not want to display the analysis results on the standard output
    type: enum
    enum: ["/dev/stdout", "/dev/stderr", "/dev/null"]
    default: "/dev/stdout"
  exit-code-threshold:
    description: Specify the upper limit of the exit code that is regarded as normal termination
    type: integer
    default: 124
  ignore-exit-code:
    description: Specify true if you want the exit code of the analysis step to always return 0.
    type: boolean
    default: false
  error-pattern:
    description: Specify the pattern if you want to detect analyzing errors from the standard error
    type: string
    default: '(?!)'
  no-output-timeout:
    description: Elapsed time the command can run without output. The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s”
    type: string
    default: 10m
  max-procs:
    description: Specify the maximum number of processes to run at the same time
    type: integer
    default: 1
steps:
  - run: echo "export -n ANALYSIS_ARGUMENTS HEADER_ARGUMENTS FOOTER_ARGUMENTS TRANSFORMATION_ARGUMENTS" >> $BASH_ENV
  - steps: << parameters.prepare >>
  - run:
      name: << parameters.step-name >>
      environment:
        SHOULD_FIND: << parameters.should-find >>
        STARTING_POINTS: << parameters.starting-points >>
        PATTERNS_TO_INCLUDE: << parameters.patterns-to-include >>
        PATTERNS_TO_EXCLUDE: << parameters.patterns-to-exclude >>
        ANALYSIS_COMMAND: << parameters.analysis-command >>
        HEADER_COMMAND: << parameters.header-command >>
        FOOTER_COMMAND: << parameters.footer-command >>
        TRANSFORMATION_COMMAND: << parameters.transformation-command >>
        PARAM_ANALYSIS_ARGUMENTS: << parameters.analysis-arguments >>
        PARAM_HEADER_ARGUMENTS: << parameters.header-arguments >>
        PARAM_FOOTER_ARGUMENTS: << parameters.footer-arguments >>
        PARAM_TRANSFORMATION_ARGUMENTS: << parameters.transformation-arguments >>
        PARAM_RESULT_PATH: << parameters.result-path >>
        ERROR_PATTERN: << parameters.error-pattern >>
      command: |
          set +e -x

          STDERR_TEMP="$(mktemp)"
          rm "${STDERR_TEMP}" && mkfifo "${STDERR_TEMP}"
          tee /dev/stderr <"${STDERR_TEMP}" | { ! grep -E "${ERROR_PATTERN}" >/dev/null; } &
          ERROR_FILTER=$!

          {
            if $SHOULD_FIND
            then {
              echo "$STARTING_POINTS" | awk NF | while read -r path; do printf '%q\n' "$path" || exit $?; done
              echo '-type f -regextype "posix-extended" ( -path ""'
              echo "$PATTERNS_TO_INCLUDE" | awk NF | while read -r pattern; do printf -- '-o -regex %q\n' "$pattern" || exit $? ; done
              echo ') '
              echo "$PATTERNS_TO_EXCLUDE" | awk NF | while read -r pattern; do printf '! -regex %q\n' "$pattern" || exit $? ; done
              echo ' -print'
            } | xargs -t find
            else {
              echo "$STARTING_POINTS"
            }
            fi
          } |
          {
            circleci tests split --show-counts --split-by=filesize |
            tr '\n' '\0' |
            xargs -0P << parameters.max-procs >> "${ANALYSIS_COMMAND:-true}" "${ANALYSIS_ARGUMENTS[@]}" ${PARAM_ANALYSIS_ARGUMENTS} 2>"${STDERR_TEMP}" |
            cat \
              <("${HEADER_COMMAND:-true}" "${HEADER_ARGUMENTS[@]}" ${PARAM_HEADER_ARGUMENTS}) \
              - \
              <("${FOOTER_COMMAND:-true}" "${FOOTER_ARGUMENTS[@]}" ${PARAM_FOOTER_ARGUMENTS}) |
            "${TRANSFORMATION_COMMAND:-cat}" "${TRANSFORMATION_ARGUMENTS[@]}" ${PARAM_TRANSFORMATION_ARGUMENTS} |
            tee "${RESULT_PATH:-${PARAM_RESULT_PATH:-/dev/null}}" ><< parameters.redirecting-output >>
          } ||
          test $? -lt << parameters.exit-code-threshold >> && wait ${ERROR_FILTER} || << parameters.ignore-exit-code >>
      no_output_timeout: << parameters.no-output-timeout >>
