description: |
  Calculate the difference between the analysis results

  Use the [checkstyle-reports-combiner][1] command to calculate the difference

  [1]: https://www.npmjs.com/package/junit-reports-combiner
parameters:
  options:
    description: Specify options for the checkstyle-reports-combiner command
    type: string
    default: ""
  first-result-path:
    description: Path of the file to use as the minuend
    type: string
    default: "HEAD-analysis-result.xml"
  second-result-path:
    description: Path of the file to use as the subtrahend
    type: string
    default: "BASE-analysis-result.xml"
  delta-result-path:
    description: Path to save difference of analysis result
    type: string
    default: "DELTA-analysis-result.xml"
  should-install-node_js:
    description: Specify true if the execution environment does not have Node.js installed
    type: boolean
    default: false
steps:
  - when:
      condition: << parameters.should-install-node_js >>
      steps:
        - node/install
  - run: sudo npm install --global junit-reports-combiner
  - run:
      name: Calculate the difference
      environment:
        COMMAND: checkstyle-reports-combiner
        OPTIONS: << parameters.options >> --operator=except
        PARAM_FIRST_RESULT_PATH: << parameters.first-result-path >>
        PARAM_SECOND_RESULT_PATH: << parameters.second-result-path >>
        PARAM_DELTA_RESULT_PATH: << parameters.delta-result-path >>
      command: |
          set -x

          function isarray {
            declare -p "$1" | grep -qE "^declare -a"
          }

          declare -A MAP=( [FIRST]=HEAD [SECOND]=BASE [DELTA]=DELTA )
          for KEY in ${!MAP[@]}
          do
            if isarray "${KEY}_RESULT_PATH"
            then
              declare -n "${KEY}_PATHS"="${KEY}_RESULT_PATH"
            else
              declare -n RESULT_PATH="${KEY}_RESULT_PATH"
              declare -n PARAM_RESULT_PATH="PARAM_${KEY}_RESULT_PATH"
              declare "${KEY}_PATHS"="${RESULT_PATH:-${PARAM_RESULT_PATH:-${MAP[$KEY]}-analysis-result.xml}}"
            fi
          done

          LAST=$(node -pe 'Math.max(...process.argv.slice(1).map(Number)) - 1' ${#FIRST_PATHS[*]} ${#SECOND_PATHS[*]} ${#DELTA_PATHS[*]})
          for INDEX in $(seq 0 $LAST)
          do
            for KEY in FIRST SECOND
            do
              declare -n PATHS="${KEY}_PATHS"
              FILE="${PATHS[$INDEX]}"
              if [ -e "$FILE" ]
              then
                declare "$KEY"="$FILE"
              else
                TEMP=$(mktemp)
                echo '<checkstyle/>' > "$TEMP"
                declare "$KEY"="$TEMP"
              fi
            done
            DELTA="${DELTA_PATHS[$INDEX]}"
            mkdir -p $(dirname "${DELTA}")
            NODE_DEBUG="$COMMAND" "$COMMAND" $OPTIONS "${FIRST}" "${SECOND}" | tee "${DELTA}"
          done
