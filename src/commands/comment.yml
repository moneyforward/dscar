description: Add a review comment about the analysis result to the pull request
parameters:
  analysis-results-path:
    description: Specify the path to save the analysis results if you need to change it
    type: string
    default: ""
  pattern:
    description: Specify pattern to include by regular expression
    type: string
    default: ".*"
  vcs-api-token:
    description: Specify the environment variable name where the VCS (Version Control System) API token is set.
    type: env_var_name
    default: GITHUB_TOKEN
  when:
    description: "Specify when to enable or disable the step. Takes the following values: always, on_success, on_fail (default: on_fail)"
    type: enum
    enum: [on_success, always, on_fail]
    default: on_fail
steps:
  - run:
      name: Add a review comment to the pull request
      environment:
        ANALYSIS_RESULTS_PATH: << parameters.analysis-results-path >>
        PATTERN: << parameters.pattern >>
      command: |
        set -x

        XSL=$(mktemp)
        cat \<<-"EOT" > "$XSL"
        <?xml version="1.0"?>
        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exslt="http://exslt.org/common" version="1.0" extension-element-prefixes="exslt">
          <xsl:output method="html" omit-xml-declaration="yes" indent="no"/>
          <xsl:param name="analyzer" select="true" />
          <xsl:param name="path" select="''" />
          <xsl:param name="username" select="''" />
          <xsl:template match="//error">
            <article>
              @<xsl:value-of select="$username" />
              <p><b>[<xsl:value-of select="$analyzer" />]</b><xsl:text> </xsl:text><span><xsl:value-of select="@message" /></span></p>
              <details>
                <p><xsl:value-of select="." /></p>
                <p><xsl:value-of select="number(@line)" /> line , <xsl:value-of select="number(@column)" /> column in <code><xsl:value-of select="$path" /></code></p>
                <dl>
                  <dt>Rule</dt><dd><xsl:value-of select="@source" /></dd>
                  <dt>Severity</dt><dd><xsl:value-of select="@severity" /></dd>
                </dl>
              </details>
            </article>
          </xsl:template>
        </xsl:stylesheet>
        EOT

        FILTER="{ body: \"$(
        cat \<<-EOT | tr -s ' \n' ' '
        <article>
          <p>
            :warning: \(length) warnings could not be commented as a review comment.
            These warnings is probably about a change made to the base commit.
            If you rebase, the check may be successful.
          </p>
          <details>\(map("<blockquote>\(.body)</blockquote>")|join(""))</details>
        </article>
        EOT
        )\"}"

        if [ -v CIRCLE_PULL_REQUEST ]
        then
          if echo "$CIRCLE_PULL_REQUEST" | grep '^https://github.com/'
          then
            sudo apt-get install xmlstarlet jq

            function relativize {
              RELATIVE_PATH="${1#${PWD}/}"
              echo "${RELATIVE_PATH#./}"
            }

            ANALYSIS_RESULTS_PATH="${ANALYSIS_RESULTS_PATH:-${DSCAR_ANALYSIS_RESULTS_PATH:-/tmp/dscar/analysis-results}}"
            REQUEST_HEADERS=(
              -H "Authorization: token ${<< parameters.vcs-api-token >>}"
              -H 'Accept: application/vnd.github.comfort-fade-preview+json'
              -H "Content-Type: application/json"
            )

            for KEY in "${!DSCAR_COMMIT_RANGES[@]}"
            do
              COMMITS=( $(echo ${DSCAR_COMMIT_RANGES[$KEY]} | tr -s '.' '\t' ) )
              BASE=${COMMITS[0]}
              HEAD=${COMMITS[1]}
              DELTA=$(echo -n "$KEY" | sha1sum | cut -d' ' -f1)
              PULL_REQUEST="$KEY"
              PR_PATH="${PULL_REQUEST#https://github.com/}"
              PR_URL="https://api.github.com/repos/${PR_PATH/pull/pulls}"
              REVIEW_COMMENT_URL="${PR_URL}/comments"
              PR_COMMENT_URL="${PR_URL/pulls/issues}/comments"
              MESSAGES_THAT_COULD_NOT_BE_COMMENTED="$(mktemp)"

              EXPRESSION=(
                  -type f
                  -regextype posix-extended
                  -regex "$PATTERN"
                  '('
                    -regex ".*/([0-9]+-|)${HEAD}-analysis-result.xml$"
                    -o
                    -regex ".*/([0-9]+-|)${BASE}-analysis-result.xml$"
                    -o
                    -regex ".*/([0-9]+-|)${DELTA}-DELTA-analysis-result.xml$"
                  ')'
                   -printf '%P\n'
              )
              find "${ANALYSIS_RESULTS_PATH}" "${EXPRESSION[@]}" |
              tee /dev/stderr |
              while read -r RESULT_PATH
              do
                {
                  ANALYSIS_NAME=$( echo "${RESULT_PATH}" | tr '/' '\t' | cut -f1 )
                  COMMENT_FINGERPRINTS_PATH="/tmp/dscar/comment-fingerprints/${ANALYSIS_NAME}"
                  COMMENT_FINGERPRINTS="${COMMENT_FINGERPRINTS_PATH}/$(echo "${PULL_REQUEST}" | sha1sum | cut -c1-40)"
                  mkdir -p "$(dirname "${COMMENT_FINGERPRINTS}")"
                  touch "${COMMENT_FINGERPRINTS}"

                  { xmlstarlet sel -t -m '//error' -e comment -a file -v '../@name' -b -c '.' -b -n || : ; } |
                  tee /dev/stderr |
                  while read -r COMMENT
                  do
                    FILE="$(echo "$COMMENT" | xmlstarlet sel -t -m '/comment' -v '@file')"
                    RELATIVE_PATH="$(relativize "${FILE}")"

                    LINE="$(echo "$COMMENT" | xmlstarlet sel -t -m '//error' -v '@line')"

                    if [ ${LINE:--1} -gt 0 ]
                    then COMMENT_URL="${REVIEW_COMMENT_URL}"
                    else COMMENT_URL="${PR_COMMENT_URL}"
                    fi

                    echo "${COMMENT}" |
                    xmlstarlet tr "$XSL" -s "analyzer=${ANALYSIS_NAME}" -s "path=${RELATIVE_PATH}" -s "username=${CIRCLE_USERNAME}" |
                    jq -scMR \
                      --arg 'commit_id' "${CIRCLE_SHA1}" \
                      --arg 'path' "${RELATIVE_PATH}" \
                      --arg 'line' "${LINE}" \
                      '{ line: $line|tonumber, side: "RIGHT", commit_id: $commit_id, path: $path, body: . }' |
                    tee /dev/stderr |
                    (
                      set +e
                      REQUEST_BODY="$(mktemp)"
                      cat > "${REQUEST_BODY}"
                      if ! { jq -cM 'del(.commit_id)' | sha1sum -c "${COMMENT_FINGERPRINTS}" 2>/dev/null | grep -q 'OK$' ; } < "${REQUEST_BODY}"
                      then
                        if curl -SsfL "${REQUEST_HEADERS[@]}" --data-binary "@${REQUEST_BODY}" "${COMMENT_URL}"
                        then
                          { jq -cM 'del(.commit_id)' | sha1sum ; } < "${REQUEST_BODY}" >> "${COMMENT_FINGERPRINTS}"
                        else
                          cat < "${REQUEST_BODY}" >> "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}"
                        fi
                      else
                        echo 'This warning has been commented.' >&2
                      fi
                    )
                  done
                } < "${ANALYSIS_RESULTS_PATH}/${RESULT_PATH}"
              done

              if [ $(jq -srM 'length' < "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}") -gt 0 ]
              then
                REQUEST_BODY="$(mktemp)"
                jq -srM "${FILTER}" < "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}" > "${REQUEST_BODY}"
                if ! { sha1sum -c "${COMMENT_FINGERPRINTS}" 2>/dev/null | grep -q 'OK$' ; } < "${REQUEST_BODY}"
                then
                  curl -SsfL "${REQUEST_HEADERS[@]}" --data-binary "@${REQUEST_BODY}" "${PR_COMMENT_URL}"
                  sha1sum < "${REQUEST_BODY}" >> "${COMMENT_FINGERPRINTS}"
                else
                  echo 'This warning has been commented.' >&2
                fi
              fi
            done
          else
            echo "sorry. Only GitHub is supported."
          fi
        fi
      when: << parameters.when >>
