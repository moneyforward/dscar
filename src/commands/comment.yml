description: Add a review comment about the analysis result to the pull request
parameters:
  analysis-results-path:
    description: Specify the path to save the analysis results if you need to change it
    type: string
    default: "/tmp/analysis-results"
  pattern:
    description: Specify pattern to include by regular expression
    type: string
    default: ".*"
  vcs-api-token:
    description: Specify the environment variable name where the VCS (Version Control System) API token is set.
    type: env_var_name
    default: GITHUB_TOKEN
  when:
    description: "Specify when to enable or disable the step. Takes the following values: always, on_success, on_fail (default: on_fail)"
    type: enum
    enum: [on_success, always, on_fail]
    default: on_fail
steps:
  - run:
      name: Add a review comment to the pull request
      environment:
          ANALYSIS_RESULTS_PATH: << parameters.analysis-results-path >>
          PATTERN: << parameters.pattern >>
      command: |
          set -x

          XSL=$(mktemp)
          cat \<<-"EOT" > "$XSL"
          <?xml version="1.0"?>
          <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exslt="http://exslt.org/common" version="1.0" extension-element-prefixes="exslt">
            <xsl:output method="html" omit-xml-declaration="yes" indent="no"/>
            <xsl:param name="analyzer" select="true" />
            <xsl:param name="path" select="''" />
            <xsl:param name="username" select="''" />
            <xsl:template match="//error">
              <article>
                @<xsl:value-of select="$username" />
                <p><b>[<xsl:value-of select="$analyzer" />]</b><xsl:text> </xsl:text><span><xsl:value-of select="@message" /></span></p>
                <details>
                  <p><xsl:value-of select="." /></p>
                  <p><xsl:value-of select="number(@line)" /> line , <xsl:value-of select="number(@column)" /> column in <code><xsl:value-of select="$path" /></code></p>
                  <dl>
                    <dt>Rule</dt><dd><xsl:value-of select="@source" /></dd>
                    <dt>Severity</dt><dd><xsl:value-of select="@severity" /></dd>
                  </dl>
                </details>
              </article>
            </xsl:template>
          </xsl:stylesheet>
          EOT

          if [ -v CIRCLE_PULL_REQUEST ]
          then
            if echo "$CIRCLE_PULL_REQUEST" | grep '^https://github.com/'
            then
              sudo apt-get install xmlstarlet jq

              function relativize {
                RELATIVE_PATH="${1#${PWD}/}"
                echo "${RELATIVE_PATH#./}"
              }

              PR_PATH="${CIRCLE_PULL_REQUEST#https://github.com/}"
              PR_URL="https://api.github.com/repos/${PR_PATH/pull/pulls}"
              REVIEW_COMMENT_URL="${PR_URL}/comments"
              PR_COMMENT_URL="${PR_URL/pulls/issues}/comments"
              REQUEST_HEADERS=(
                -H "Authorization: token ${<< parameters.vcs-api-token >>}"
                -H 'Accept: application/vnd.github.comfort-fade-preview+json'
                -H "Content-Type: application/json"
              )

              MESSAGES_THAT_COULD_NOT_BE_COMMENTED="$(mktemp)"

              find "${ANALYSIS_RESULTS_PATH:-/tmp/analysis-results}" -type f -regextype posix-extended -regex "$PATTERN" |
              while read -r RESULT_PATH
              do
                {
                  ANALYSIS_NAME=$(echo "${RESULT_PATH#${ANALYSIS_RESULTS_PATH}/}" | sed -re 's/^([^\/]*)\/.*$/\1/')
                  xmlstarlet sel -t -m '//error' -e comment -a file -v '../@name' -b -c '.' -b -n |
                  while read -r COMMENT
                  do
                    FILE="$(echo "$COMMENT" | xmlstarlet sel -t -m '/comment' -v '@file')"
                    RELATIVE_PATH="$(relativize "${FILE}")"

                    LINE="$(echo "$COMMENT" | xmlstarlet sel -t -m '//error' -v '@line')"

                    if [ ${LINE:--1} -gt 0 ]
                    then COMMENT_URL="${REVIEW_COMMENT_URL}"
                    else COMMENT_URL="${PR_COMMENT_URL}"
                    fi

                    echo "${COMMENT}" |
                    xmlstarlet tr "$XSL" -s "analyzer=${ANALYSIS_NAME}" -s "path=${RELATIVE_PATH}" -s "username=${CIRCLE_USERNAME}" |
                    jq -scMR \
                      --arg 'commit_id' "${CIRCLE_SHA1}" \
                      --arg 'path' "${RELATIVE_PATH}" \
                      --arg 'line' "${LINE}" \
                      '{ line: $line|tonumber, side: "RIGHT", commit_id: $commit_id, path: $path, body: . }' |
                    tee /dev/stderr |
                    (
                      set +e
                      REQUEST_BODY="$(mktemp)"
                      cat > "${REQUEST_BODY}"
                      curl -SsfL "${REQUEST_HEADERS[@]}" --data-binary "@${REQUEST_BODY}" "${COMMENT_URL}" || {
                        cat < "${REQUEST_BODY}" >> "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}"
                      }
                    )
                  done
                } < "$RESULT_PATH"
              done

              if [ $(jq -srM 'length' < "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}") -gt 0 ]
              then
                FILTER='{ body: "<article><p>:warning: \(length) warnings could not be commented as a review comment. These warnings is probably about a change made to the base commit. If you rebase, the check may be successful.</p><details>\(map("<blockquote>\(.body)</blockquote>")|join(""))</details></article>" }'
                jq -srM "${FILTER}" < "${MESSAGES_THAT_COULD_NOT_BE_COMMENTED}" |
                curl -SsfL "${REQUEST_HEADERS[@]}" --data-binary "@-" "${PR_COMMENT_URL}"
              fi
            else
              echo "sorry. Only GitHub is supported."
            fi
          fi
      when: << parameters.when >>
